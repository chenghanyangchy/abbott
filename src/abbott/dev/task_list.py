"""Contains the list of tasks available to fractal."""

from fractal_tasks_core.dev.task_models import CompoundTask, ParallelTask

TASK_LIST = [
    CompoundTask(
        name="Compute Registration (elastix)",
        executable_init="fractal_tasks/init_registration_hcs.py",
        executable="fractal_tasks/compute_registration_elastix.py",
        meta={"cpus_per_task": 4, "mem": 16000},
        category="Registration",
        modality="HCS",
        tags=["Multiplexing"],
        docs_info="file:docs_info/calculate_registration.md",
    ),
    ParallelTask(
        name="Apply Registration (elastix)",
        input_types=dict(registered=False),
        executable="fractal_tasks/apply_registration_elastix.py",
        output_types=dict(registered=True),
        meta={"cpus_per_task": 1, "mem": 4000},
        category="Registration",
        modality="HCS",
        tags=["Multiplexing"],
        docs_info="file:docs_info/apply_registration.md",
    ),
    CompoundTask(
        name="Compute Registration per ROI (elastix)",
        executable_init="fractal_tasks/init_registration_hcs.py",
        executable="fractal_tasks/compute_registration_elastix_per_ROI.py",
        meta={"cpus_per_task": 4, "mem": 16000},
        category="Registration",
        modality="HCS",
        tags=["Multiplexing"],
        docs_info="file:docs_info/calculate_registration_ROI.md",
    ),
    ParallelTask(
        name="Apply Registration per ROI (elastix)",
        input_types=dict(registered=False),
        executable="fractal_tasks/apply_registration_elastix_per_ROI.py",
        output_types=dict(registered=True),
        meta={"cpus_per_task": 1, "mem": 4000},
        category="Registration",
        modality="HCS",
        tags=["Multiplexing"],
        docs_info="file:docs_info/apply_registration_ROI.md",
    ),
    ParallelTask(
        name="Compute Channel Registration (elastix)",
        input_types=dict(channels_registered=False),
        executable="fractal_tasks/compute_channel_registration_elastix.py",
        meta={"cpus_per_task": 1, "mem": 4000},
        category="Registration",
        modality="HCS",
        tags=["Multiplexing"],
        docs_info="file:docs_info/calculate_channel_registration.md",
    ),
    ParallelTask(
        name="Apply Channel Registration (elastix)",
        input_types=dict(channels_registered=False),
        executable="fractal_tasks/apply_channel_registration_elastix.py",
        output_types=dict(channels_registered=True),
        meta={"cpus_per_task": 1, "mem": 4000},
        category="Registration",
        modality="HCS",
        tags=["Multiplexing"],
        docs_info="file:docs_info/apply_channel_registration.md",
    ),
    CompoundTask(
        name="Convert Cellvoyager Multiplexing to existing OME-Zarr",
        executable_init="fractal_tasks/cellvoyager_to_ome_zarr_init_extend_multiplex.py",
        executable="fractal_tasks/cellvoyager_compute_omezarr.py",
        meta_init={"cpus_per_task": 1, "mem": 4000},
        meta={"cpus_per_task": 1, "mem": 4000},
        category="Conversion",
        modality="HCS",
        tags=["Yokogawa", "Cellvoyager", "2D", "3D"],
        docs_info="file:docs_info/convert_cellvoyager_multiplex_extend.md",
    ),
    ParallelTask(
        name="Stardist Segmentation",
        executable="fractal_tasks/stardist_segmentation.py",
        meta={"cpus_per_task": 4, "mem": 16000, "needs_gpu": True},
        category="Segmentation",
        tags=[
            "Deep Learning",
            "Convolutional Neural Network",
            "Instance Segmentation",
            "2D",
            "3D",
        ],
        docs_info="file:docs_info/stardist_segmentation.md",
    ),
]
