"""Contains the list of tasks available to Fractal."""

from fractal_task_tools.task_models import (
    CompoundTask,
    ConverterCompoundTask,
    ParallelTask,
)

TASK_LIST = [
    CompoundTask(
        name="Compute Registration (elastix)",
        executable_init="fractal_tasks/init_registration_hcs.py",
        executable="fractal_tasks/compute_registration_elastix.py",
        meta={"cpus_per_task": 4, "mem": 16000},
        category="Registration",
        modality="HCS",
        tags=["Multiplexing"],
        docs_info="file:docs_info/calculate_registration.md",
    ),
    ParallelTask(
        name="Apply Registration (elastix)",
        input_types=dict(registered=False),
        executable="fractal_tasks/apply_registration_elastix.py",
        output_types=dict(registered=True),
        meta={"cpus_per_task": 1, "mem": 4000},
        category="Registration",
        modality="HCS",
        tags=["Multiplexing"],
        docs_info="file:docs_info/apply_registration.md",
    ),
    # CompoundTask(
    #     name="Compute Registration (warpfield)",
    #     executable_init="fractal_tasks/init_registration_hcs.py",
    #     executable="fractal_tasks/compute_registration_warpfield.py",
    #     meta={"cpus_per_task": 4, "mem": 16000},
    #     category="Registration",
    #     modality="HCS",
    #     tags=["Multiplexing"],
    #     docs_info="file:docs_info/calculate_registration_warpfield.md",
    # ),
    # ParallelTask(
    #     name="Apply Registration (warpfield)",
    #     input_types=dict(registered=False),
    #     executable="fractal_tasks/apply_registration_warpfield.py",
    #     output_types=dict(registered=True),
    #     meta={"cpus_per_task": 1, "mem": 4000},
    #     category="Registration",
    #     modality="HCS",
    #     tags=["Multiplexing"],
    #     docs_info="file:docs_info/apply_registration_warpfield.md",
    # ),
    ParallelTask(
        name="Compute Channel Registration (elastix)",
        input_types=dict(channels_registered=False),
        executable="fractal_tasks/compute_channel_registration_elastix.py",
        meta={"cpus_per_task": 1, "mem": 4000},
        category="Registration",
        modality="HCS",
        tags=["Multiplexing"],
        docs_info="file:docs_info/calculate_channel_registration.md",
    ),
    ParallelTask(
        name="Apply Channel Registration (elastix)",
        input_types=dict(channels_registered=False),
        executable="fractal_tasks/apply_channel_registration_elastix.py",
        output_types=dict(channels_registered=True),
        meta={"cpus_per_task": 1, "mem": 4000},
        category="Registration",
        modality="HCS",
        tags=["Multiplexing"],
        docs_info="file:docs_info/apply_channel_registration.md",
    ),
    CompoundTask(
        name="Convert Cellvoyager Multiplexing to existing OME-Zarr",
        executable_init="fractal_tasks/cellvoyager_to_ome_zarr_init_extend_multiplex.py",
        executable="fractal_tasks/cellvoyager_compute_omezarr.py",
        meta_init={"cpus_per_task": 1, "mem": 4000},
        meta={"cpus_per_task": 1, "mem": 4000},
        category="Conversion",
        modality="HCS",
        tags=["Yokogawa", "Cellvoyager", "2D", "3D"],
        docs_info="file:docs_info/convert_cellvoyager_multiplex_extend.md",
    ),
    ParallelTask(
        name="Stardist Segmentation",
        executable="fractal_tasks/stardist_segmentation.py",
        meta={"cpus_per_task": 4, "mem": 16000, "needs_gpu": True},
        category="Segmentation",
        tags=[
            "Deep Learning",
            "Convolutional Neural Network",
            "Instance Segmentation",
            "2D",
            "3D",
        ],
        docs_info="file:docs_info/stardist_segmentation.md",
    ),
    ParallelTask(
        name="Seeded Watershed Segmentation",
        executable="fractal_tasks/seeded_segmentation.py",
        meta={"cpus_per_task": 4, "mem": 16000},
        category="Segmentation",
        tags=[
            "scikit-image",
            "itk,",
            "3D",
        ],
        docs_info="file:docs_info/seeded_segmentation.md",
    ),
    ParallelTask(
        name="Upsample Label Image",
        executable="fractal_tasks/upsample_label_image.py",
        meta={"cpus_per_task": 4, "mem": 16000},
        category="Image Processing",
        tags=["3D"],
        docs_info="file:docs_info/upsample_label_image.md",
    ),
    ConverterCompoundTask(
        name="Convert abbott-legacy H5 to OME-Zarr",
        executable_init="fractal_tasks/convert_abbottlegacyh5_to_omezarr_init.py",
        executable="fractal_tasks/convert_abbottlegacyh5_to_omezarr_compute.py",
        meta_init={"cpus_per_task": 1, "mem": 4000},
        meta={"cpus_per_task": 16, "mem": 60000},
        category="Conversion",
        modality="HCS",
        tags=["Yokogawa", "Cellvoyager", "3D"],
        docs_info="file:docs_info/convert_abbottlegacyh5_omezarr.md",
    ),
]
