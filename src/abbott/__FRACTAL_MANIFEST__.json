{
  "manifest_version": "2",
  "task_list": [
    {
      "name": "Compute Registration (elastix)",
      "category": "Registration",
      "modality": "HCS",
      "tags": [
        "Multiplexing"
      ],
      "docs_info": "### Purpose\n- **Computes image-based registration** transformations for acquisitions in **HCS** OME-Zarr datasets using the elastix library.\n- Needs Elastix profiles to configure the registration.\n- Processes images grouped by well, under the assumption that each well contains one image per acquisition.\n- Calculates transformations for **specified regions of interest (ROIs)** and stores the results in a registration subfolder per OME-Zarr image.\n- Typically used as the first task in a workflow, followed by `Apply Registration (elastix)`.\n\n### Limitations\n- Supports only HCS OME-Zarr datasets, leveraging their acquisition metadata and well-based image grouping.\n- Assumes each well contains a single image per acquisition.\n",
      "executable_non_parallel": "fractal_tasks/init_registration_hcs.py",
      "executable_parallel": "fractal_tasks/compute_registration_elastix.py",
      "meta_parallel": {
        "cpus_per_task": 4,
        "mem": 16000
      },
      "args_schema_non_parallel": {
        "additionalProperties": false,
        "properties": {
          "zarr_urls": {
            "items": {
              "type": "string"
            },
            "title": "Zarr Urls",
            "type": "array",
            "description": "List of paths or urls to the individual OME-Zarr image to be processed. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "zarr_dir": {
            "title": "Zarr Dir",
            "type": "string",
            "description": "path of the directory where the new OME-Zarrs will be created. Not used by this task. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "reference_acquisition": {
            "default": 0,
            "title": "Reference Acquisition",
            "type": "integer",
            "description": "Which acquisition to register against. Needs to match the acquisition metadata in the OME-Zarr image."
          }
        },
        "required": [
          "zarr_urls",
          "zarr_dir"
        ],
        "type": "object",
        "title": "InitRegistrationHcs"
      },
      "args_schema_parallel": {
        "$defs": {
          "InitArgsRegistration": {
            "description": "Registration init args.",
            "properties": {
              "reference_zarr_url": {
                "title": "Reference Zarr Url",
                "type": "string"
              }
            },
            "required": [
              "reference_zarr_url"
            ],
            "title": "InitArgsRegistration",
            "type": "object"
          }
        },
        "additionalProperties": false,
        "properties": {
          "zarr_url": {
            "title": "Zarr Url",
            "type": "string",
            "description": "Path or url to the individual OME-Zarr image to be processed. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "init_args": {
            "$ref": "#/$defs/InitArgsRegistration",
            "title": "Init Args",
            "description": "Intialization arguments provided by `image_based_registration_hcs_init`. They contain the reference_zarr_url that is used for registration. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "wavelength_id": {
            "title": "Wavelength Id",
            "type": "string",
            "description": "Wavelength that will be used for image-based registration; e.g. `A01_C01` for Yokogawa, `C01` for MD."
          },
          "parameter_files": {
            "items": {
              "type": "string"
            },
            "title": "Parameter Files",
            "type": "array",
            "description": "Paths to the elastix parameter files to be used."
          },
          "lower_rescale_quantile": {
            "default": 0.0,
            "title": "Lower Rescale Quantile",
            "type": "number",
            "description": "Lower quantile for rescaling the image intensities before applying registration. Can be helpful to deal with image artifacts. Default is 0."
          },
          "upper_rescale_quantile": {
            "default": 0.99,
            "title": "Upper Rescale Quantile",
            "type": "number",
            "description": "Upper quantile for rescaling the image intensities before applying registration. Can be helpful to deal with image artifacts. Default is 0.99."
          },
          "roi_table": {
            "default": "FOV_ROI_table",
            "title": "Roi Table",
            "type": "string",
            "description": "Name of the ROI table over which the task loops to calculate the registration. Examples: `FOV_ROI_table` => loop over the field of views, `well_ROI_table` => process the whole well as one image."
          },
          "level": {
            "default": 2,
            "title": "Level",
            "type": "integer",
            "description": "Pyramid level of the image to be used for registration. Choose `0` to process at full resolution."
          }
        },
        "required": [
          "zarr_url",
          "init_args",
          "wavelength_id",
          "parameter_files"
        ],
        "type": "object",
        "title": "ComputeRegistrationElastix"
      },
      "docs_link": "https://github.com/pelkmanslab/abbott"
    },
    {
      "name": "Apply Registration (elastix)",
      "input_types": {
        "registered": false
      },
      "output_types": {
        "registered": true
      },
      "category": "Registration",
      "modality": "HCS",
      "tags": [
        "Multiplexing"
      ],
      "docs_info": "### Purpose\n- **Applies pre-calculated registration** from `Compute Registration elastix` task to images in an **HCS** OME-Zarr dataset, aligning all acquisitions to a specified reference acquisition.\n- Replaces the non-aligned image with the newly aligned image in the dataset if `overwrite input` is selected.\n- Typically used as the second task in a workflow, following `Calculate Registration (elastix)`.\n\n### Limitations\n- If `overwrite input` is selected, the non-aligned image is permanently deleted, which may impact workflows requiring access to the original images.\n",
      "executable_parallel": "fractal_tasks/apply_registration_elastix.py",
      "meta_parallel": {
        "cpus_per_task": 1,
        "mem": 4000
      },
      "args_schema_parallel": {
        "additionalProperties": false,
        "properties": {
          "zarr_url": {
            "title": "Zarr Url",
            "type": "string",
            "description": "Path or url to the individual OME-Zarr image to be processed. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "roi_table": {
            "title": "Roi Table",
            "type": "string",
            "description": "Name of the ROI table for which registrations have been calculated using the Compute Registration Elastix task. Examples: `FOV_ROI_table` => loop over the field of views, `well_ROI_table` => process the whole well as one image."
          },
          "reference_acquisition": {
            "default": 0,
            "title": "Reference Acquisition",
            "type": "integer",
            "description": "Which acquisition to register against. Uses the OME-NGFF HCS well metadata acquisition keys to find the reference acquisition."
          },
          "overwrite_input": {
            "default": true,
            "title": "Overwrite Input",
            "type": "boolean",
            "description": "Whether the old image data should be replaced with the newly registered image data. Currently only implemented for `overwrite_input=True`."
          },
          "overwrite_output": {
            "default": true,
            "title": "Overwrite Output",
            "type": "boolean",
            "description": "Whether pre-existing registered images (which will be named \"zarr_url\" + _registered) should be overwritten by the task."
          }
        },
        "required": [
          "zarr_url",
          "roi_table"
        ],
        "type": "object",
        "title": "ApplyRegistrationElastix"
      },
      "docs_link": "https://github.com/pelkmanslab/abbott"
    },
    {
      "name": "Compute Channel Registration (elastix)",
      "input_types": {
        "channels_registered": false
      },
      "category": "Registration",
      "modality": "HCS",
      "tags": [
        "Multiplexing"
      ],
      "docs_info": "### Purpose\n- **Computes image-based registration** transformations for acquisitions in **HCS** OME-Zarr datasets using the elastix library.\n- Needs Elastix profiles to configure the registration.\n- Processes images grouped by well, under the assumption that each well contains one image per acquisition.\n- Calculates transformations for **specified regions of interest (ROIs)** and stores the results in a registration subfolder per OME-Zarr image.\n- Typically used as the first task in a workflow, followed by `Apply Channel Registration (elastix)`.\n\n### Limitations\n- Supports only HCS OME-Zarr datasets, leveraging their acquisition metadata and well-based image grouping.\n- Assumes each well contains a single image per acquisition.\n",
      "executable_parallel": "fractal_tasks/compute_channel_registration_elastix.py",
      "meta_parallel": {
        "cpus_per_task": 1,
        "mem": 4000
      },
      "args_schema_parallel": {
        "additionalProperties": false,
        "properties": {
          "zarr_url": {
            "title": "Zarr Url",
            "type": "string",
            "description": "Path or url to the individual OME-Zarr image to be processed. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "reference_wavelength": {
            "title": "Reference Wavelength",
            "type": "string",
            "description": "Wavelength that will be used for image-based registration; e.g. `A01_C01` for Yokogawa, `C01` for MD."
          },
          "parameter_files": {
            "items": {
              "type": "string"
            },
            "title": "Parameter Files",
            "type": "array",
            "description": "Paths to the elastix parameter files to be used. Usually a single parameter file with the transformation class SimilarityTransform to compute channel registration."
          },
          "lower_rescale_quantile": {
            "default": 0.0,
            "title": "Lower Rescale Quantile",
            "type": "number",
            "description": "Lower quantile for rescaling the image intensities before applying registration. Can be helpful to deal with image artifacts. Default is 0."
          },
          "upper_rescale_quantile": {
            "default": 0.99,
            "title": "Upper Rescale Quantile",
            "type": "number",
            "description": "Upper quantile for rescaling the image intensities before applying registration. Can be helpful to deal with image artifacts. Default is 0.99."
          },
          "roi_table": {
            "default": "FOV_ROI_table",
            "title": "Roi Table",
            "type": "string",
            "description": "Name of the ROI table over which the task loops to calculate the registration. Examples: `FOV_ROI_table` => loop over the field of views, `well_ROI_table` => process the whole well as one image."
          },
          "level": {
            "default": 2,
            "title": "Level",
            "type": "integer",
            "description": "Pyramid level of the image to be used for registration. Choose `0` to process at full resolution."
          }
        },
        "required": [
          "zarr_url",
          "reference_wavelength",
          "parameter_files"
        ],
        "type": "object",
        "title": "ComputeChannelRegistrationElastix"
      },
      "docs_link": "https://github.com/pelkmanslab/abbott"
    },
    {
      "name": "Apply Channel Registration (elastix)",
      "input_types": {
        "channels_registered": false
      },
      "output_types": {
        "channels_registered": true
      },
      "category": "Registration",
      "modality": "HCS",
      "tags": [
        "Multiplexing"
      ],
      "docs_info": "### Purpose\n- **Applies pre-calculated registration** from `Calculate Channel Registration (elastix)` task to images in an **HCS** OME-Zarr dataset, aligning all channels of an acquisition to a specified reference wavelength.\n- This task is useful if there are wavelength- and sample-dependent chromatic shifts.\n- Replaces the non-aligned image with the newly aligned image in the dataset if `overwrite input` is selected.\n- Typically used as the second task in a workflow, following `Calculate Channel Registration (elastix)`.\n\n### Limitations\n- If `overwrite input` is selected, the non-aligned image is permanently deleted, which may impact workflows requiring access to the original images.\n",
      "executable_parallel": "fractal_tasks/apply_channel_registration_elastix.py",
      "meta_parallel": {
        "cpus_per_task": 1,
        "mem": 4000
      },
      "args_schema_parallel": {
        "additionalProperties": false,
        "properties": {
          "zarr_url": {
            "title": "Zarr Url",
            "type": "string",
            "description": "Path or url to the individual OME-Zarr image to be processed. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "roi_table": {
            "title": "Roi Table",
            "type": "string",
            "description": "Name of the ROI table for which registrations have been calculated using the Compute Registration Elastix task. Examples: `FOV_ROI_table` => loop over the field of views, `well_ROI_table` => process the whole well as one image."
          },
          "reference_wavelength": {
            "title": "Reference Wavelength",
            "type": "string",
            "description": "Against which wavelength the registration was calculated."
          },
          "overwrite_input": {
            "default": true,
            "title": "Overwrite Input",
            "type": "boolean",
            "description": "Whether the old image data should be replaced with the newly registered image data. Currently only implemented for `overwrite_input=True`."
          },
          "overwrite_output": {
            "default": true,
            "title": "Overwrite Output",
            "type": "boolean",
            "description": "Whether pre-existing registered images (which will be named \"zarr_url\" + channel_registered) should be overwritten by the task."
          }
        },
        "required": [
          "zarr_url",
          "roi_table",
          "reference_wavelength"
        ],
        "type": "object",
        "title": "ApplyChannelRegistrationElastix"
      },
      "docs_link": "https://github.com/pelkmanslab/abbott"
    },
    {
      "name": "Convert Cellvoyager Multiplexing to existing OME-Zarr",
      "category": "Conversion",
      "modality": "HCS",
      "tags": [
        "Yokogawa",
        "Cellvoyager",
        "2D",
        "3D"
      ],
      "docs_info": "### Purpose\n- Converts **multiplexed 2D and 3D images from CellVoyager CV7000/8000** systems into OME-Zarr format, storing each acquisition as a separate OME-Zarr image, **extending an existing** OME-Zarr plate.\n- Creates **OME-Zarr HCS plates**, combining all fields of view for each acquisition in a well into a single image.\n- Saves Fractal **region-of-interest (ROI) tables** for both individual fields of view and the entire well.\n- Handles overlapping fields of view by adjusting their positions to be non-overlapping, while preserving the original position data as additional columns in the ROI tables.\n\n### Limitations\n- This task currently does not support time-resolved data and ignores the time fields in CellVoyager metadata.\n",
      "executable_non_parallel": "fractal_tasks/cellvoyager_to_ome_zarr_init_extend_multiplex.py",
      "executable_parallel": "fractal_tasks/cellvoyager_compute_omezarr.py",
      "meta_non_parallel": {
        "cpus_per_task": 1,
        "mem": 4000
      },
      "meta_parallel": {
        "cpus_per_task": 1,
        "mem": 4000
      },
      "args_schema_non_parallel": {
        "$defs": {
          "MultiplexingAcquisition": {
            "description": "Input class for Multiplexing Cellvoyager converter",
            "properties": {
              "image_dir": {
                "title": "Image Dir",
                "type": "string",
                "description": "Path to the folder that contains the Cellvoyager image files for that acquisition and the MeasurementData & MeasurementDetail metadata files."
              },
              "allowed_channels": {
                "items": {
                  "$ref": "#/$defs/OmeroChannel"
                },
                "title": "Allowed Channels",
                "type": "array",
                "description": "A list of `OmeroChannel` objects, where each channel must include the `wavelength_id` attribute and where the `wavelength_id` values must be unique across the list."
              }
            },
            "required": [
              "image_dir",
              "allowed_channels"
            ],
            "title": "MultiplexingAcquisition",
            "type": "object"
          },
          "OmeroChannel": {
            "description": "Custom class for Omero channels, based on OME-NGFF v0.4.",
            "properties": {
              "wavelength_id": {
                "title": "Wavelength Id",
                "type": "string",
                "description": "Unique ID for the channel wavelength, e.g. `A01_C01`."
              },
              "index": {
                "title": "Index",
                "type": "integer",
                "description": "Do not change. For internal use only."
              },
              "label": {
                "title": "Label",
                "type": "string",
                "description": "Name of the channel."
              },
              "window": {
                "allOf": [
                  {
                    "$ref": "#/$defs/Window"
                  }
                ],
                "title": "Window",
                "description": "Optional `Window` object to set default display settings for napari."
              },
              "color": {
                "title": "Color",
                "type": "string",
                "description": "Optional hex colormap to display the channel in napari (it must be of length 6, e.g. `00FFFF`)."
              },
              "active": {
                "default": true,
                "title": "Active",
                "type": "boolean",
                "description": "Should this channel be shown in the viewer?"
              },
              "coefficient": {
                "default": 1,
                "title": "Coefficient",
                "type": "integer",
                "description": "Do not change. Omero-channel attribute."
              },
              "inverted": {
                "default": false,
                "title": "Inverted",
                "type": "boolean",
                "description": "Do not change. Omero-channel attribute."
              }
            },
            "required": [
              "wavelength_id"
            ],
            "title": "OmeroChannel",
            "type": "object"
          },
          "Window": {
            "description": "Custom class for Omero-channel window, based on OME-NGFF v0.4.",
            "properties": {
              "min": {
                "title": "Min",
                "type": "integer",
                "description": "Do not change. It will be set to `0` by default."
              },
              "max": {
                "title": "Max",
                "type": "integer",
                "description": "Do not change. It will be set according to bit-depth of the images by default (e.g. 65535 for 16 bit images)."
              },
              "start": {
                "title": "Start",
                "type": "integer",
                "description": "Lower-bound rescaling value for visualization."
              },
              "end": {
                "title": "End",
                "type": "integer",
                "description": "Upper-bound rescaling value for visualization."
              }
            },
            "required": [
              "start",
              "end"
            ],
            "title": "Window",
            "type": "object"
          }
        },
        "additionalProperties": false,
        "properties": {
          "zarr_urls": {
            "items": {
              "type": "string"
            },
            "title": "Zarr Urls",
            "type": "array",
            "description": "List of paths or urls to the individual OME-Zarr image to be processed. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "zarr_dir": {
            "title": "Zarr Dir",
            "type": "string",
            "description": "path to the directory of the existing OME-Zarr file where the new acquisitions will be added. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "acquisitions": {
            "additionalProperties": {
              "$ref": "#/$defs/MultiplexingAcquisition"
            },
            "title": "Acquisitions",
            "type": "object",
            "description": "dictionary of acquisitions. Each key is the acquisition identifier (normally 0, 1, 2, 3 etc.). Each item defines the acquisition by providing the image_dir and the allowed_channels."
          },
          "include_glob_patterns": {
            "items": {
              "type": "string"
            },
            "title": "Include Glob Patterns",
            "type": "array",
            "description": "If specified, only parse images with filenames that match with all these patterns. Patterns must be defined as in https://docs.python.org/3/library/fnmatch.html, Example: `image_glob_pattern=[\"*_B03_*\"]` => only process well B03 `image_glob_pattern=[\"*_C09_*\", \"*F016*\", \"*Z[0-5][0-9]C*\"]` => only process well C09, field of view 16 and Z planes 0-59. Can interact with exclude_glob_patterns: All included images - all excluded images gives the final list of images to process"
          },
          "exclude_glob_patterns": {
            "items": {
              "type": "string"
            },
            "title": "Exclude Glob Patterns",
            "type": "array",
            "description": "If specified, exclude any image where the filename matches any of the exclusion patterns. Patterns are specified the same as for include_glob_patterns."
          },
          "num_levels": {
            "default": 5,
            "title": "Num Levels",
            "type": "integer",
            "description": "Number of resolution-pyramid levels. If set to `5`, there will be the full-resolution level and 4 levels of downsampled images."
          },
          "coarsening_xy": {
            "default": 2,
            "title": "Coarsening Xy",
            "type": "integer",
            "description": "Linear coarsening factor between subsequent levels. If set to `2`, level 1 is 2x downsampled, level 2 is 4x downsampled etc."
          },
          "image_extension": {
            "default": "tif",
            "title": "Image Extension",
            "type": "string",
            "description": "Filename extension of images (e.g. `\"tif\"` or `\"png\"`)."
          },
          "metadata_table_files": {
            "additionalProperties": {
              "type": "string"
            },
            "title": "Metadata Table Files",
            "type": "object",
            "description": "If `None`, parse Yokogawa metadata from mrf/mlf files in the input_path folder; else, a dictionary of key-value pairs like `(acquisition, path)` with `acquisition` a string like the key of the `acquisitions` dict and `path` pointing to a csv file containing the parsed metadata table."
          },
          "overwrite": {
            "default": false,
            "title": "Overwrite",
            "type": "boolean",
            "description": "If `True`, overwrite the task output."
          }
        },
        "required": [
          "zarr_urls",
          "zarr_dir",
          "acquisitions"
        ],
        "type": "object",
        "title": "CellvoyagerToOmeZarrInitExtendMultiplex"
      },
      "args_schema_parallel": {
        "$defs": {
          "ChunkSizes": {
            "description": "Chunk size settings for OME-Zarrs.",
            "properties": {
              "t": {
                "title": "T",
                "type": "integer"
              },
              "c": {
                "default": 1,
                "title": "C",
                "type": "integer"
              },
              "z": {
                "default": 10,
                "title": "Z",
                "type": "integer"
              },
              "y": {
                "title": "Y",
                "type": "integer"
              },
              "x": {
                "title": "X",
                "type": "integer"
              }
            },
            "title": "ChunkSizes",
            "type": "object"
          },
          "InitArgsCellVoyager": {
            "description": "Arguments to be passed from cellvoyager converter init to compute",
            "properties": {
              "image_dir": {
                "title": "Image Dir",
                "type": "string"
              },
              "plate_prefix": {
                "title": "Plate Prefix",
                "type": "string"
              },
              "well_ID": {
                "title": "Well Id",
                "type": "string"
              },
              "image_extension": {
                "title": "Image Extension",
                "type": "string"
              },
              "include_glob_patterns": {
                "items": {
                  "type": "string"
                },
                "title": "Include Glob Patterns",
                "type": "array"
              },
              "exclude_glob_patterns": {
                "items": {
                  "type": "string"
                },
                "title": "Exclude Glob Patterns",
                "type": "array"
              },
              "acquisition": {
                "title": "Acquisition",
                "type": "integer"
              }
            },
            "required": [
              "image_dir",
              "plate_prefix",
              "well_ID",
              "image_extension"
            ],
            "title": "InitArgsCellVoyager",
            "type": "object"
          }
        },
        "additionalProperties": false,
        "properties": {
          "zarr_url": {
            "title": "Zarr Url",
            "type": "string",
            "description": "Path or url to the individual OME-Zarr image to be processed. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "init_args": {
            "$ref": "#/$defs/InitArgsCellVoyager",
            "title": "Init Args",
            "description": "Intialization arguments provided by `create_cellvoyager_ome_zarr_init`."
          },
          "chunk_sizes": {
            "$ref": "#/$defs/ChunkSizes",
            "title": "Chunk Sizes",
            "description": "Used to overwrite the default chunk sizes for the OME-Zarr. By default, the task will chunk the same as the microscope field of view size, with 10 z planes per chunk. For example, that can mean c: 1, z: 10, y: 2160, x:2560"
          }
        },
        "required": [
          "zarr_url",
          "init_args"
        ],
        "type": "object",
        "title": "CellvoyagerComputeOmezarr"
      },
      "docs_link": "https://github.com/pelkmanslab/abbott"
    }
  ],
  "has_args_schemas": true,
  "args_schema_version": "pydantic_v2",
  "authors": "Ruth Hornbachner"
}
